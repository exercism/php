<?php

{% set callbacks = {
    '(x) -> x modulo 2 == 1': 'static fn ($el) => $el % 2 === 1',
    '(x) -> x + 1': 'static fn ($el) => $el + 1',
    '(acc, el) -> el * acc': 'static fn ($acc, $el) => $el * $acc',
    '(acc, el) -> el + acc': 'static fn ($acc, $el) => $el + $acc',
    '(acc, el) -> el / acc': 'static fn ($acc, $el) => $el / $acc',
}
-%}

/*
 * By adding type hints and enabling strict type checking, code can become
 * easier to read, self-documenting and reduce the number of potential bugs.
 * By default, type declarations are non-strict, which means they will attempt
 * to change the original type to match the type specified by the
 * type-declaration.
 *
 * In other words, if you pass a string to a function requiring a float,
 * it will attempt to convert the string value to a float.
 *
 * To enable strict mode, a single declare directive must be placed at the top
 * of the file.
 * This means that the strictness of typing is configured on a per-file basis.
 * This directive not only affects the type declarations of parameters, but also
 * a function's return type.
 *
 * For more info review the Concept on strict type checking in the PHP track
 * <link>.
 *
 * To disable strict typing, comment out the directive below.
 */

declare(strict_types=1);

use PHPUnit\Framework\ExpectationFailedException;

class ListOpsTest extends PHPUnit\Framework\TestCase
{
    public static function setUpBeforeClass(): void
    {
        require_once 'ListOps.php';
    }


    {% for case0 in cases -%}
    {% for case in case0.cases -%}
    /**
     * @testdox {{ case0.description }} -> {{ case.description }}
     */
    public function {{ testfn(case0.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        {% for property, value in case.input -%}
        ${{ property }} = {{ property == 'function' ? callbacks[value] : export(value) }};
        {% endfor %}

        $result = $listOps->{{ case.property }}({{ case.input | keys | map(p => '$' ~ p) | join(', ')}});

        $this->assertEquals({{ export(case.expected) }}, $result);
    }

    {% endfor -%}
    {% endfor -%}
}
