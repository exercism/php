<?php

{% set callbacks = {
    '(x) -> x modulo 2 == 1': 'static fn ($el) => $el % 2 === 1',
    '(x) -> x + 1': 'static fn ($el) => $el + 1',
    '(acc, el) -> el * acc': 'static fn ($acc, $el) => $el * $acc',
    '(acc, el) -> el + acc': 'static fn ($acc, $el) => $el + $acc',
    '(acc, el) -> el / acc': 'static fn ($acc, $el) => $el / $acc',
}
-%}

/*
 * By adding type hints and enabling strict type checking, code can become
 * easier to read, self-documenting and reduce the number of potential bugs.
 * By default, type declarations are non-strict, which means they will attempt
 * to change the original type to match the type specified by the
 * type-declaration.
 *
 * In other words, if you pass a string to a function requiring a float,
 * it will attempt to convert the string value to a float.
 *
 * To enable strict mode, a single declare directive must be placed at the top
 * of the file.
 * This means that the strictness of typing is configured on a per-file basis.
 * This directive not only affects the type declarations of parameters, but also
 * a function's return type.
 *
 * For more info review the Concept on strict type checking in the PHP track
 * <link>.
 *
 * To disable strict typing, comment out the directive below.
 */

declare(strict_types=1);

use PHPUnit\Framework\ExpectationFailedException;

class ListOpsTest extends PHPUnit\Framework\TestCase
{
    public static function setUpBeforeClass(): void
    {
        require_once 'ListOps.php';
    }

    {% set case0 = cases[0] -%}
    {% for case in case0.cases -%}
    /**
     * @testdox {{ case0.description }} -> {{ case.description }}
     */
    public function {{ testfn(case0.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals({{ export(case.expected) }}, $listOps->{{ case.property }}({{ export(case.input.list1) }}, {{ export(case.input.list2) }}));
    }

    {% endfor -%}

    {% set case1 = cases[1] -%}
    {% for case in case1.cases -%}
    /**
     * @testdox {{ case1.description }} -> {{ case.description }}
     */
    public function {{ testfn(case1.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals({{ export(case.expected) }}, $listOps->{{ case.property }}({{ case.input.lists | map(l => export(l)) | join(', ') }}));
    }

    {% endfor -%}


    {% set case2 = cases[2] -%}
    {% for case in case2.cases -%}
    /**
     * @testdox {{ case2.description }} -> {{ case.description }}
     */
    public function {{ testfn(case2.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals(
            {{ export(case.expected) }},
            $listOps->{{ case.property }}({{ callbacks[case.input.function] }}, {{ export(case.input.list) }})
        );
    }

    {% endfor -%}


    {% set case3 = cases[3] -%}
    {% for case in case3.cases -%}
    /**
     * @testdox {{ case3.description }} -> {{ case.description }}
     */
    public function {{ testfn(case3.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals({{ export(case.expected) }}, $listOps->{{ case.property }}({{ export(case.input.list) }}));
    }

    {% endfor -%}


    {% set case4 = cases[4] -%}
    {% for case in case4.cases -%}
    /**
     * @testdox {{ case4.description }} -> {{ case.description }}
     */
    public function {{ testfn(case4.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals(
            {{ export(case.expected) }},
            $listOps->{{ case.property }}({{ callbacks[case.input.function] }}, {{ export(case.input.list) }})
        );
    }

    {% endfor -%}


    {% set case5 = cases[5] -%}
    {% for case in case5.cases -%}
    /**
     * @testdox {{ case5.description }} -> {{ case.description }}
     */
    public function {{ testfn(case5.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals(
            {{ export(case.expected) }},
            $listOps->{{ case.property }}({{ callbacks[case.input.function] }}, {{ export(case.input.list) }}, {{ export(case.input.initial) }})
        );
    }

    {% endfor -%}


    {% set case6 = cases[6] -%}
    {% for case in case6.cases -%}
    /**
     * @testdox {{ case6.description }} -> {{ case.description }}
     */
    public function {{ testfn(case6.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals(
            {{ export(case.expected) }},
            $listOps->{{ case.property }}({{ callbacks[case.input.function] }}, {{ export(case.input.list) }}, {{ export(case.input.initial) }})
        );
    }
    {% endfor -%}

    {%- set case7 = cases[7] %}
    {%- for case in case7.cases %}
    /**
     * @testdox {{ case7.description }} -> {{ case.description }}
     */
    public function {{ testfn(case7.description ~ ' with ' ~ case.description) }}()
    {
        $listOps = new ListOps();
        $this->assertEquals({{ export(case.expected) }}, $listOps->{{ case.property }}({{ export(case.input.list) }}));
    }
    {%- endfor %}

}
