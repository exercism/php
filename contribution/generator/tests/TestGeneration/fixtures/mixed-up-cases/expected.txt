<?php

declare (strict_types=1);

use PHPUnit\Framework\TestCase;

/**
 * - Please use `assertSame()` whenever possible. Add a comment with reason
 *   when it is not possible.
 * - Do not use calls with named arguments. Use them only when the
 *   exercise requires named arguments (e.g. because the exercise is
 *   about named arguments).
 *   Named arguments are in the way of defining argument names the
 *   students want (e.g. in their native language).
 * - Add `@testdox` with a useful test title, e.g. the test case heading
 *   from canonical data. The online editor shows that to students.
 * - Add fail messages to assertions where helpful to tell students more
 *   than `@testdox` says.
 */
final class SomeTestClass extends TestCase
{
    private SomeSolutionClass $subject;
    
    public static function setUpBeforeClass(): void
    {
        require_once('SomeSolutionFile.ext');
    }
    
    public function setUp(): void
    {
        $this->subject = new SomeSolutionClass();
    }
    
    /* Unknown data:
     * {"an-unknown-item":"will render as multiline comment with JSON"}
     */
    function unknownMethod0()
    {
    }
    
    /**
     * uuid: 31a673f2-5e54-49fe-bd79-1c1dae476c9c
     * @testdox First description
     * @test
     */
    public function firstDescription(): void
    {
        $this->markTestSkipped('This test has not been implemented yet.');
        
        $input = array (
          'argumentName' => 
          array (
          ),
        );
        $expected = true;
        
        $actual = $this->subject->someProperty(...$input);
        
        $this->assertSame($expected, $actual);
    }
    
    /* Unknown data:
     * {"description":"first description","cases":[{"uuid":"4f99b933-367b-404b-8c6d-36d5923ee476","description":"second description","property":"otherProperty","input":{"otherArgumentName":[[1,1]]},"expected":"some value"},{"also-unknown":"resulting in multiline comment with JSON"}]}
     */
    function unknownMethod2()
    {
    }
    
    /**
     * uuid: 91122d10-5ec7-47cb-b759-033756375869
     * @testdox And a last one
     * @test
     */
    public function andALastOne(): void
    {
        $this->markTestSkipped('This test has not been implemented yet.');
        
        $input = array (
          'argumentName' => 
          array (
            0 => 
            array (
              0 => 1,
              1 => 2,
            ),
          ),
        );
        $expected = array (
          0 => 
          array (
            0 => 1,
            1 => 1,
            2 => 3,
          ),
        );
        
        $actual = $this->subject->alsoProperty(...$input);
        
        $this->assertSame($expected, $actual);
    }
}
